<template>
  <view class="container">
    <!-- content body -->
    <view class="content">
      <view class="no-data"
            wx:if="{{groups.length === 0}}">
        <image class="icon"
               src="../assets/img/no-group.png"
               mode="scaleToFill"
               lazy-load="false">
        </image>
        <view class="text text-gray">您暂无分类，<text class="text-blue">请添加</text></view>
      </view>
      <view class="list"
            wx:else>
        <repeat for="{{groups}}"
                key="index"
                index="index"
                item="item">
          <view class="card padding-lg shadow margin-bottom-sm bg-white"
                @tap="handleAccount({{item}})">
            <image src="{{item.logo || '../assets/img/icon-type.png'}}"
                   mode="scaleToFill"
                   lazy-load="false">
            </image>
            <view class="intro">
              <view class="header">{{item.name}}</view>
              <view class="label">{{item.description}}</view>
            </view>
            <view class="actions">
              <view class="time">{{item.updated_at}}</view>
              <button id="setting"
                      class="setting cu-btn round lines-blue shadow"
                      @tap="handleSet({{item}})">设置</button>
            </view>
          </view>
        </repeat>
      </view>
    </view>
    <i-action-sheet visible="{{ visible }}"
                    actions="{{ actions }}"
                    show-cancel
                    bind:cancel="handleCancel"
                    bind:click="handleClickItem" />
    <!-- TabBar -->
    <tab-bar current="Group" />
    <i-message id="message" />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import TabBar from '../components/TabBar'
  import { $Message } from '../iview/base/index'
  import { deleteGroup } from '../services/group'

  export default class Group extends wepy.page {
    config = {
      navigationBarTitleText: '分类',
      navigationBarTextStyle: 'white'
    }

    components = {
      'tab-bar': TabBar
    }

    data = {
      userInfo: null,
      groups: [],
      activeGroup: null,
      visible: false,
      actions: [{ name: '编辑类型', color: '#1890FF' }, { name: '删除类型', color: '#ed3f14' }]
    }

    onLoad() {
      wx.hideTabBar()
      this.userInfo = wx.getStorageSync('userInfo')
      this.groups = wx.getStorageSync('groups')
    }

    methods = {
      handleAccount(item, e) {
        if (e.target.id) return
        wx.navigateTo({
          url: `./account-list?groupId=${item._id}`
        })
      },
      handleSet(item) {
        this.visible = true
        this.activeGroup = item
      },
      handleClickItem(e) {
        this.visible = false
        if (e.detail.index === 0) {
          wx.navigateTo({
            url: `./edit-group?groupId=${this.activeGroup._id}`
          })
        }
        if (e.detail.index === 1) {
          this.deleteData()
        }
      },
      handleCancel() {
        this.visible = false
      }
    }
    // 删除分组
    deleteData() {
      const _self = this
      wx.showModal({
        title: '提示',
        content: '删除类型，同时将删除该类型下的账号，您确定要删除吗？',
        cancelColor: '#999999',
        confirmColor: '#1890FF',
        success(res) {
          if (res.confirm) {
            wx.showLoading({ title: '删除中...', mask: true })
            deleteGroup(_self.activeGroup._id)
              .then(res => {
                wx.hideLoading()
                if (res.head.code === 1) {
                  const index = _self.groups.findIndex(item => item._id === _self.activeGroup._id)
                  _self.groups.splice(index, 1)
                  wx.setStorageSync('groups', _self.groups)
                  $Message({
                    content: '删除类型成功',
                    type: 'success'
                  })
                } else {
                  $Message({
                    content: '删除类型失败',
                    type: 'error'
                  })
                }
                _self.$apply()
              })
              .catch(err => {
                console.log(err)
              })
          }
        }
      })
    }
  }
</script>

<style lang="scss" scoped>
  .container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    padding-bottom: 100rpx;
    background-color: #fff;
  }
  .content {
    flex: 1;
    overflow: auto;
    padding-bottom: 35rpx;
    .no-data {
      height: 100%;
      text-align: center;
      padding-top: 200rpx;
      image {
        width: 400rpx;
        height: 326rpx;
      }
      .text {
        padding: 20rpx;
        font-size: 28rpx;
      }
    }
    .list {
      padding: 30rpx;
    }
    .card {
      display: flex;
      align-items: center;
      image {
        width: 90rpx;
        height: 90rpx;
      }
      .intro {
        margin-left: 30rpx;
        flex: 1;
      }
      .header {
        font-size: 30rpx;
        color: #333333;
        font-weight: 500;
      }
      .label {
        font-size: 26rpx;
        color: #666666;
        margin-top: 20rpx;
      }
      .actions {
        text-align: right;
      }
      .time {
        font-size: 24rpx;
        color: #999999;
      }
      .setting {
        margin-top: 18rpx;
      }
    }
  }
</style>
